"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "(pages-dir-browser)/./src/utils/lucid.ts":
/*!****************************!*\
  !*** ./src/utils/lucid.ts ***!
  \****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SCRIPT_ADDRESS: () => (/* binding */ SCRIPT_ADDRESS),\n/* harmony export */   deployBetContract: () => (/* binding */ deployBetContract),\n/* harmony export */   encodeDatum: () => (/* binding */ encodeDatum),\n/* harmony export */   encodeRedeemer: () => (/* binding */ encodeRedeemer),\n/* harmony export */   getScriptUtxos: () => (/* binding */ getScriptUtxos),\n/* harmony export */   initLucid: () => (/* binding */ initLucid),\n/* harmony export */   joinBet: () => (/* binding */ joinBet),\n/* harmony export */   timeoutBet: () => (/* binding */ timeoutBet),\n/* harmony export */   winBet: () => (/* binding */ winBet)\n/* harmony export */ });\n/* harmony import */ var lucid_cardano__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lucid-cardano */ \"(pages-dir-browser)/./node_modules/lucid-cardano/esm/mod.js\");\n/* harmony import */ var _scripts_bet_plutus_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/scripts/bet.plutus.json */ \"(pages-dir-browser)/./src/scripts/bet.plutus.json\");\n/* harmony import */ var _scripts_bet_plutus__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/scripts/bet.plutus */ \"(pages-dir-browser)/./src/scripts/bet.plutus.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([lucid_cardano__WEBPACK_IMPORTED_MODULE_0__]);\nlucid_cardano__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n // JSON compilato\n\nlet lucidInstance;\nlet validatorAddress;\n// Configura il provider Blockfrost\nconst BLOCKFROST_URL = \"https://cardano-preview.blockfrost.io/api/v0\" || 0;\nconst BLOCKFROST_KEY = \"preview3G3NLFawCSyrtNMZb06OfRknAxZgy1fb\";\n// Indirizzo del tuo script Aiken (derivato dal Plutus script hash)\nconst SCRIPT_ADDRESS = \"addr_test1wrar992kj6gjcyczxd9gr302unaw7m09p3jrfvwwucuy6ccz5fklc\";\n// Costruisci un oggetto Script leggendo dal JSON\nconst validatorScript = {\n    type: _scripts_bet_plutus_json__WEBPACK_IMPORTED_MODULE_1__.type,\n    script: _scripts_bet_plutus_json__WEBPACK_IMPORTED_MODULE_1__.cborHex\n};\nfunction addressToBytes(address) {\n    var _details_paymentCredential;\n    const details = lucidInstance.utils.getAddressDetails(address);\n    const hashHex = (_details_paymentCredential = details.paymentCredential) === null || _details_paymentCredential === void 0 ? void 0 : _details_paymentCredential.hash;\n    if (!hashHex) {\n        throw new Error('Impossibile ottenere paymentCredential.hash da ' + address);\n    }\n    // fromHex si aspetta stringa senza \"0x\"\n    const clean = hashHex.startsWith('0x') ? hashHex.slice(2) : hashHex;\n    return (0,lucid_cardano__WEBPACK_IMPORTED_MODULE_0__.fromHex)(clean);\n}\n/** Serializza il Datum usando lo schema generato da Aiken */ function encodeDatum(d) {\n    const shaped = {\n        oracle: addressToBytes(d.oracle),\n        wager: d.wager,\n        player_1: addressToBytes(d.player_1),\n        player_2: addressToBytes(d.player_2),\n        deadline: d.deadline,\n        isJoined: d.isJoined\n    };\n    console.log(shaped);\n    return lucid_cardano__WEBPACK_IMPORTED_MODULE_0__.Data.to(shaped, _scripts_bet_plutus__WEBPACK_IMPORTED_MODULE_2__.BetBetSpend.datum);\n}\n/** serializza il tuo redeemer (Join, Win, Timeout) */ function encodeRedeemer(r) {\n    return lucid_cardano__WEBPACK_IMPORTED_MODULE_0__.Data.to(r, _scripts_bet_plutus__WEBPACK_IMPORTED_MODULE_2__.BetBetSpend.redeemer);\n}\n/**\n * Inizializza Lucid e wallet (solo browser).\n */ async function initLucid() {\n    if (!lucidInstance) {\n        const provider = new lucid_cardano__WEBPACK_IMPORTED_MODULE_0__.Blockfrost(BLOCKFROST_URL, BLOCKFROST_KEY);\n        lucidInstance = await lucid_cardano__WEBPACK_IMPORTED_MODULE_0__.Lucid.new(provider, 'Preview');\n        if ( true && window.cardano) {\n            // Trova il wallet Lace o Nami compatibile\n            const wallet = window.cardano.lace || window.cardano.nami || Object.values(window.cardano).find((w)=>w.name === 'Nami' || w.name === 'Lace');\n            if (!wallet) throw new Error('Wallet compatibile non trovato');\n            const api = await wallet.enable();\n            validatorAddress = lucidInstance.utils.validatorToAddress(validatorScript);\n            lucidInstance.selectWallet(api);\n        }\n    }\n    return lucidInstance;\n}\n/**\n * Recupera tutti gli UTxO dal tuo script address.\n */ async function getScriptUtxos() {\n    const lucid = await initLucid();\n    return lucid.utxosAt(validatorAddress);\n}\nconst Listing = lucid_cardano__WEBPACK_IMPORTED_MODULE_0__.Data.Object({\n    owner: lucid_cardano__WEBPACK_IMPORTED_MODULE_0__.Data.Bytes(),\n    amount: lucid_cardano__WEBPACK_IMPORTED_MODULE_0__.Data.Integer(),\n    private: lucid_cardano__WEBPACK_IMPORTED_MODULE_0__.Data.Boolean()\n});\n/**\n * Costruisce e invia una transazione che spende/aggiorna l'UTxO sullo script.\n */ async function buildAndSubmit(datum, redeemer) {\n    const lucid = await initLucid();\n    const utxos = await lucid.utxosAt(validatorAddress);\n    const utxo = utxos.find((u)=>{\n        const d = u.datum;\n        return d && d.oracle === datum.oracle && d.deadline === datum.deadline;\n    });\n    if (!utxo) throw new Error('UTxO della scommessa non trovato');\n    const newDatum = encodeDatum(datum);\n    const tx = await lucid.newTx().attachSpendingValidator(validatorScript).collectFrom([\n        utxo\n    ], encodeRedeemer(redeemer)).payToContract(validatorAddress, encodeDatum(datum), {\n        lovelace: datum.wager * 2n\n    }).complete();\n}\n// -------------------------\n// AZIONI SUL VALIDATOR BET\n// -------------------------\n/** Join: constructor index 0 */ async function joinBet(d) {\n    const redeemer = {\n        Join: {\n            wager: d.wager\n        }\n    };\n    // buildAndSubmit ora deve accettare la stringa serializzata\n    return buildAndSubmit({\n        ...d,\n        isJoined: true\n    }, redeemer);\n}\n/** Win: constructor index 1 */ async function winBet(d, winner) {\n    const redeemer = {\n        Win: {\n            winner\n        }\n    };\n    return buildAndSubmit(d, redeemer);\n}\n/** Timeout: constructor index 2 */ async function timeoutBet(d) {\n    const redeemer = \"Timeout\";\n    return buildAndSubmit(d, redeemer);\n}\n/**\n * Deploy: crea un UTxO iniziale presso lo script con il datum iniziale.\n * @param d BetDatum iniziale\n * @param initialAda quantitÃ  di lovelace da inviare (default 2 ADA)\n */ async function deployBetContract(d) {\n    let initialAda = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 2000000n;\n    const lucid = await initLucid();\n    console.log(d);\n    const tx = await lucid.newTx().attachSpendingValidator(validatorScript).payToContract(validatorAddress, encodeDatum(d), {\n        lovelace: initialAda\n    }).complete();\n    const signed = await tx.sign().complete();\n    return signed.submit();\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./src/utils/lucid.ts\n"));

/***/ })

});