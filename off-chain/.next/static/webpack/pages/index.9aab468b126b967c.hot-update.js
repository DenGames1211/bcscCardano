"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "(pages-dir-browser)/./src/utils/betWin.ts":
/*!*****************************!*\
  !*** ./src/utils/betWin.ts ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   betWin: () => (/* binding */ betWin)\n/* harmony export */ });\n/* harmony import */ var _meshsdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @meshsdk/core */ \"(pages-dir-browser)/./node_modules/@meshsdk/core/dist/index.js\");\n/* harmony import */ var _utils_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/utils/common */ \"(pages-dir-browser)/./src/utils/common.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_utils_common__WEBPACK_IMPORTED_MODULE_1__]);\n_utils_common__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\nconst provider = new _meshsdk_core__WEBPACK_IMPORTED_MODULE_0__.BlockfrostProvider(\"preview3G3NLFawCSyrtNMZb06OfRknAxZgy1fb\");\nconst FIVE_MINUTES_MS = 5 * 60 * 1000;\nasync function betWin(param) {\n    let { oracleMnemonic, player1, player2, oracleAddr, wager, deadline, datum, joinTxHash } = param;\n    try {\n        const oracle = new _meshsdk_core__WEBPACK_IMPORTED_MODULE_0__.MeshWallet({\n            networkId: 0,\n            fetcher: provider,\n            submitter: provider,\n            key: {\n                type: 'mnemonic',\n                words: oracleMnemonic\n            }\n        });\n        await oracle.init();\n        const p1PKH = (0,_meshsdk_core__WEBPACK_IMPORTED_MODULE_0__.deserializeAddress)(player1).pubKeyHash;\n        const p2PKH = (0,_meshsdk_core__WEBPACK_IMPORTED_MODULE_0__.deserializeAddress)(player2).pubKeyHash;\n        const oraclePKH = (0,_meshsdk_core__WEBPACK_IMPORTED_MODULE_0__.deserializeAddress)(oracleAddr).pubKeyHash;\n        const winnerAddr = Math.random() < 0.5 ? player1 : player2;\n        const winnerPKH = (0,_meshsdk_core__WEBPACK_IMPORTED_MODULE_0__.deserializeAddress)(winnerAddr).pubKeyHash;\n        const wagerTotal = (BigInt(wager) * 2n).toString();\n        const lovelace = BigInt(wager);\n        //const deadline = BigInt(Date.now() + FIVE_MINUTES_MS);\n        // 1. Get UTXOs at script address\n        //const scriptUtxos = await provider.fetchAddressUTxOs(scriptAddr);\n        //const targetUtxo = scriptUtxos.find((utxo) => utxo.output.amount.find((a) => a.unit === 'lovelace' && BigInt(a.quantity) >= BigInt(wagerTotal)));\n        //if (!targetUtxo) throw new Error('No suitable UTxO at script address');\n        //const datum = makeBetDatum(oraclePKH, lovelace, p1PKH, p2PKH, deadline, true);\n        const assets = [\n            {\n                unit: \"lovelace\",\n                quantity: wager\n            }\n        ];\n        const utxos = await oracle.getUtxos();\n        const [addr] = await oracle.getUsedAddresses();\n        const { scriptCbor, scriptAddr } = (0,_utils_common__WEBPACK_IMPORTED_MODULE_1__.getScript)();\n        const hash = (0,_meshsdk_core__WEBPACK_IMPORTED_MODULE_0__.resolvePaymentKeyHash)(oracleAddr);\n        const _redeemer = {\n            data: {\n                alternative: 1,\n                fields: [\n                    winnerPKH\n                ]\n            }\n        };\n        const redeemer = {\n            constructor: 1,\n            fields: [\n                {\n                    bytes: winnerPKH\n                }\n            ]\n        };\n        console.log(\"received datum: \", (0,_meshsdk_core__WEBPACK_IMPORTED_MODULE_0__.resolveDataHash)(datum));\n        console.log(\"datum structure: \", datum);\n        await new Promise((res)=>setTimeout(res, 2 * 60 * 1000));\n        const utxo = await (0,_utils_common__WEBPACK_IMPORTED_MODULE_1__.getUtxoByTxHash)(joinTxHash);\n        console.log(\"utxos ricevuti: \", utxo);\n        //const assetUtxo = await getAssetUtxo({\n        //scriptAddress: scriptAddr,\n        //asset: \"lovelace\",\n        //datum: datum\n        //});\n        //if (!assetUtxo) {\n        //throw new Error(\"No matching UTxO found with the given datum.\");\n        //}\n        const plutusScript = {\n            code: scriptCbor,\n            version: 'V3'\n        };\n        const txBuilder = new _meshsdk_core__WEBPACK_IMPORTED_MODULE_0__.MeshTxBuilder({\n            fetcher: provider,\n            verbose: true\n        });\n        const unsignedTx = await txBuilder.spendingPlutusScriptV3().txOut(scriptAddr, assets).txOutDatumHashValue(datum).selectUtxosFrom(utxos).txOut(scriptAddr, assets).changeAddress(addr).selectUtxosFrom(utxos).requiredSignerHash(oracleAddr).txInRedeemerValue(redeemer).txInScript(scriptCbor).complete();\n        //const tx = new Transaction({ initiator: oracle, fetcher: provider })\n        //      .redeemValue({\n        //          value: utxo,\n        //          script: plutusScript,\n        //          datum: datum,\n        //          redeemer: redeemer,\n        //      })\n        //  .sendValue(winnerAddr, utxo)\n        //  .setRequiredSigners([oracleAddr])\n        //const unsignedTx = await tx.build();\n        const signedTx = await oracle.signTx(unsignedTx, true);\n        const txHash = await oracle.submitTx(signedTx);\n        const winner = winnerAddr.toString();\n        return {\n            winner: winner,\n            txHash: txHash\n        };\n    } catch (err) {\n        console.error('Error in betWin:', err);\n        return {\n            winner: null,\n            txHash: null\n        };\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./src/utils/betWin.ts\n"));

/***/ })

});