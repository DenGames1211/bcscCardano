"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "(pages-dir-browser)/./src/utils/common.ts":
/*!*****************************!*\
  !*** ./src/utils/common.ts ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAssetUtxo: () => (/* binding */ getAssetUtxo),\n/* harmony export */   getBrowserWallet: () => (/* binding */ getBrowserWallet),\n/* harmony export */   getScript: () => (/* binding */ getScript),\n/* harmony export */   getTxBuilder: () => (/* binding */ getTxBuilder),\n/* harmony export */   getUtxoByTxHash: () => (/* binding */ getUtxoByTxHash),\n/* harmony export */   lockAssetsWithDatum: () => (/* binding */ lockAssetsWithDatum)\n/* harmony export */ });\n/* harmony import */ var _meshsdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @meshsdk/core */ \"(pages-dir-browser)/./node_modules/@meshsdk/core/dist/index.js\");\n/* harmony import */ var _meshsdk_core_csl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @meshsdk/core-csl */ \"(pages-dir-browser)/./node_modules/@meshsdk/core-csl/dist/index.js\");\n/* harmony import */ var _scripts_bet_plutus_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/scripts/bet.plutus.json */ \"(pages-dir-browser)/./src/scripts/bet.plutus.json\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_meshsdk_core_csl__WEBPACK_IMPORTED_MODULE_1__]);\n_meshsdk_core_csl__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\nconst blockchainProvider = new _meshsdk_core__WEBPACK_IMPORTED_MODULE_0__.BlockfrostProvider(\"preview3G3NLFawCSyrtNMZb06OfRknAxZgy1fb\");\nlet _wallet = null;\n/**\r\n * Lazily initialize (and cache) a BrowserWallet instance.\r\n *\r\n * @param walletName – the CIP-30 wallet extension id (e.g. 'lace', 'nami', etc.)\r\n * @throws if called on the server, or if the extension isn’t found, or if enable() fails\r\n */ async function getBrowserWallet() {\n    let walletName = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"lace\";\n    // 1) Don't run in SSR\n    if (false) {}\n    // 2) Return the cached wallet if already connected\n    if (_wallet) {\n        return _wallet;\n    }\n    // 3) Make sure the extension is actually injected\n    const injected = window.cardano;\n    if (!injected || !injected[walletName]) {\n        throw new Error(\"No CIP-30 provider found for '\".concat(walletName, \"'. \") + \"Make sure you have the \".concat(walletName, \" extension installed and enabled.\"));\n    }\n    // 4) Try to enable (this will open the “Connect” popup)\n    try {\n        _wallet = await _meshsdk_core__WEBPACK_IMPORTED_MODULE_0__.BrowserWallet.enable(walletName);\n    } catch (err) {\n        const msg = (err === null || err === void 0 ? void 0 : err.message) || (err === null || err === void 0 ? void 0 : err.toString()) || \"Unknown error\";\n        throw new Error(\"Failed to enable '\".concat(walletName, \"': \").concat(msg));\n    }\n    return _wallet;\n}\nfunction getScript() {\n    const scriptCbor = (0,_meshsdk_core_csl__WEBPACK_IMPORTED_MODULE_1__.applyParamsToScript)(_scripts_bet_plutus_json__WEBPACK_IMPORTED_MODULE_2__.validators[0].compiledCode, []);\n    const scriptAddr = (0,_meshsdk_core__WEBPACK_IMPORTED_MODULE_0__.serializePlutusScript)({\n        code: scriptCbor,\n        version: \"V3\"\n    }).address;\n    return {\n        scriptCbor,\n        scriptAddr\n    };\n}\n// reusable function to get a transaction builder\nfunction getTxBuilder() {\n    return new _meshsdk_core__WEBPACK_IMPORTED_MODULE_0__.MeshTxBuilder({\n        fetcher: blockchainProvider,\n        submitter: blockchainProvider\n    });\n}\n// reusable function to get a UTxO by transaction hash\nasync function getUtxoByTxHash(txHash) {\n    const utxos = await blockchainProvider.fetchUTxOs(txHash);\n    if (utxos.length === 0) {\n        throw new Error(\"UTxO not found\");\n    }\n    return utxos[0];\n}\n/**\r\n * Locks the given assets into your on‐chain contract, using the provided datum.\r\n *\r\n * @param assets     – an array of `{ unit: string; quantity: string }`\r\n * @param datumCtor  – a function that, given any input, returns the serialized datum you want to attach\r\n * @param datumInput – the raw input that your datum constructor needs (e.g. a pubKeyHash, a number, whatever)\r\n * @returns the transaction hash of the lock\r\n */ async function lockAssetsWithDatum(assets, datumCtor, datumInput) {\n    // 1) grab UTXOs and your change address\n    const utxos = await _wallet.getUtxos();\n    const [walletAddress] = await _wallet.getUsedAddresses();\n    // 2) get your script (address + validator, etc.)\n    const { scriptAddr } = getScript();\n    // 3) build the transaction\n    const txBuilder = getTxBuilder().txOut(scriptAddr, assets) // funds → script\n    .txOutDatumHashValue(datumCtor(datumInput)) // attach your custom datum\n    .changeAddress(walletAddress) // return change\n    .selectUtxosFrom(utxos); // pay from your UTXOs\n    await txBuilder.complete();\n    // 4) sign & submit\n    const unsignedTx = txBuilder.txHex;\n    const signedTx = await _wallet.signTx(unsignedTx);\n    const txHash = await _wallet.submitTx(signedTx);\n    return txHash;\n}\nasync function getAssetUtxo(param) {\n    let { scriptAddress, asset, datum } = param;\n    const provider = blockchainProvider;\n    const utxos = await provider.fetchAddressUTxOs(scriptAddress, asset);\n    //console.log(\"UTxOs at script:\", utxos);\n    const dataHash = (0,_meshsdk_core_csl__WEBPACK_IMPORTED_MODULE_1__.resolveDataHash)(datum);\n    //const dataHash = \"c34b76230b9670a097bdbfc9e85ea5f7e02dbc0399806594a3c62ec7fd93402a\"\n    console.log(\"Looking for dataHash:\", (0,_meshsdk_core_csl__WEBPACK_IMPORTED_MODULE_1__.resolveDataHash)(datum));\n    //dataHash = \"78769eb5e5c09a9f5b6e6558bc1527d79a20d428f32ce78c404d0ddbb3bbcc4f\"\n    //console.log(\"script addr used: \", scriptAddress)\n    let utxo = utxos.find((utxo)=>{\n        return utxo.output.dataHash == dataHash;\n    });\n    return utxo;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./src/utils/common.ts\n"));

/***/ })

});